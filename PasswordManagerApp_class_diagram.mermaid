classDiagram
    %% Models
    class BaseEntry {
        <<abstract>>
        +Long id
        +String title
        +String creationDate
        +String lastModified
        +Boolean isFavorite
    }
    
    class PasswordEntry {
        +String title
        +String username
        +String password
        +String website
        +String notes
        +String category
        +Boolean isFavorite
        +String creationDate
        +String lastModified
    }
    
    class CreditCardEntry {
        +String cardholderName
        +String cardNumber
        +String expiryDate
        +String cvv
        +String cardType
        +String bankName
        +String notes
        +Boolean isFavorite
        +String creationDate
        +String lastModified
    }
    
    class SecureNote {
        +String title
        +String content
        +String category
        +Boolean isFavorite
        +String creationDate
        +String lastModified
    }
    
    %% Database
    class AppDatabase {
        <<Room Database>>
        +passwordDao(): PasswordDao
        +creditCardDao(): CreditCardDao
        +secureNoteDao(): SecureNoteDao
        +getInstance(): AppDatabase
    }
    
    class PasswordDao {
        <<interface>>
        +insert(password: PasswordEntry): Long
        +update(password: PasswordEntry): Int
        +delete(password: PasswordEntry): Int
        +getById(id: Long): PasswordEntry
        +getAllPasswords(): Flow~List~PasswordEntry~~
        +getPasswordsByCategory(category: String): Flow~List~PasswordEntry~~
        +searchPasswords(query: String): Flow~List~PasswordEntry~~
        +getFavorites(): Flow~List~PasswordEntry~~
    }
    
    class CreditCardDao {
        <<interface>>
        +insert(card: CreditCardEntry): Long
        +update(card: CreditCardEntry): Int
        +delete(card: CreditCardEntry): Int
        +getById(id: Long): CreditCardEntry
        +getAllCreditCards(): Flow~List~CreditCardEntry~~
        +searchCreditCards(query: String): Flow~List~CreditCardEntry~~
        +getFavorites(): Flow~List~CreditCardEntry~~
    }
    
    class SecureNoteDao {
        <<interface>>
        +insert(note: SecureNote): Long
        +update(note: SecureNote): Int
        +delete(note: SecureNote): Int
        +getById(id: Long): SecureNote
        +getAllNotes(): Flow~List~SecureNote~~
        +getNotesByCategory(category: String): Flow~List~SecureNote~~
        +searchNotes(query: String): Flow~List~SecureNote~~
        +getFavorites(): Flow~List~SecureNote~~
    }
    
    %% Repositories
    class PasswordRepository {
        -PasswordDao passwordDao
        -SecurityManager securityManager
        +insert(password: PasswordEntry): Long
        +update(password: PasswordEntry): Int
        +delete(password: PasswordEntry): Int
        +getPasswordById(id: Long): PasswordEntry
        +getAllPasswords(): Flow~List~PasswordEntry~~
        +getPasswordsByCategory(category: String): Flow~List~PasswordEntry~~
        +searchPasswords(query: String): Flow~List~PasswordEntry~~
        +getFavoritePasswords(): Flow~List~PasswordEntry~~
    }
    
    class CreditCardRepository {
        -CreditCardDao creditCardDao
        -SecurityManager securityManager
        +insert(card: CreditCardEntry): Long
        +update(card: CreditCardEntry): Int
        +delete(card: CreditCardEntry): Int
        +getCreditCardById(id: Long): CreditCardEntry
        +getAllCreditCards(): Flow~List~CreditCardEntry~~
        +searchCreditCards(query: String): Flow~List~CreditCardEntry~~
        +getFavoriteCreditCards(): Flow~List~CreditCardEntry~~
    }
    
    class SecureNoteRepository {
        -SecureNoteDao secureNoteDao
        -SecurityManager securityManager
        +insert(note: SecureNote): Long
        +update(note: SecureNote): Int
        +delete(note: SecureNote): Int
        +getNoteById(id: Long): SecureNote
        +getAllNotes(): Flow~List~SecureNote~~
        +getNotesByCategory(category: String): Flow~List~SecureNote~~
        +searchNotes(query: String): Flow~List~SecureNote~~
        +getFavoriteNotes(): Flow~List~SecureNote~~
    }
    
    %% Security
    class SecurityManager {
        -CryptoUtils cryptoUtils
        -AuthManager authManager
        +encrypt(data: String): String
        +decrypt(encryptedData: String): String
        +isAppUnlocked(): Boolean
        +lockApp()
        +unlockApp(credential: Credential): Boolean
        +generatePassword(options: PasswordOptions): String
        +evaluatePasswordStrength(password: String): PasswordStrength
    }
    
    class CryptoUtils {
        -SecretKey masterKey
        -byte[] iv
        +encrypt(data: String): String
        +decrypt(encryptedData: String): String
        +generateMasterKey(): SecretKey
        +getMasterKey(): SecretKey
        -initCipher(mode: Int): Cipher
    }
    
    class AuthManager {
        -MasterPasswordManager masterPasswordManager
        -BiometricManager biometricManager
        +authenticateWithPassword(password: String): Boolean
        +authenticateWithBiometric(activity: FragmentActivity, callback: AuthCallback)
        +setupBiometricAuth(activity: FragmentActivity)
        +isBiometricAvailable(): Boolean
        +changeMasterPassword(oldPassword: String, newPassword: String): Boolean
    }
    
    class MasterPasswordManager {
        -DataStore dataStore
        +setMasterPassword(password: String)
        +validateMasterPassword(password: String): Boolean
        +isMasterPasswordSet(): Boolean
        +resetMasterPassword(securityQuestion: String, answer: String, newPassword: String): Boolean
    }
    
    %% ViewModels
    class MainViewModel {
        -AuthManager authManager
        -MutableStateFlow~UiState~ _uiState
        +val uiState: StateFlow~UiState~
        +authenticate(credential: Credential)
        +lockApp()
    }
    
    class PasswordViewModel {
        -PasswordRepository repository
        -SecurityManager securityManager
        -MutableStateFlow~List~PasswordEntry~~ _passwords
        +val passwords: StateFlow~List~PasswordEntry~~
        +addPassword(password: PasswordEntry)
        +updatePassword(password: PasswordEntry)
        +deletePassword(password: PasswordEntry)
        +getPasswordById(id: Long): PasswordEntry
        +searchPasswords(query: String)
        +setCurrentCategory(category: String)
        +toggleFavorite(password: PasswordEntry)
        +generatePassword(options: PasswordOptions): String
    }
    
    class CreditCardViewModel {
        -CreditCardRepository repository
        -SecurityManager securityManager
        -MutableStateFlow~List~CreditCardEntry~~ _creditCards
        +val creditCards: StateFlow~List~CreditCardEntry~~
        +addCreditCard(card: CreditCardEntry)
        +updateCreditCard(card: CreditCardEntry)
        +deleteCreditCard(card: CreditCardEntry)
        +getCreditCardById(id: Long): CreditCardEntry
        +searchCreditCards(query: String)
        +toggleFavorite(card: CreditCardEntry)
    }
    
    class SecureNoteViewModel {
        -SecureNoteRepository repository
        -SecurityManager securityManager
        -MutableStateFlow~List~SecureNote~~ _notes
        +val notes: StateFlow~List~SecureNote~~
        +addNote(note: SecureNote)
        +updateNote(note: SecureNote)
        +deleteNote(note: SecureNote)
        +getNoteById(id: Long): SecureNote
        +searchNotes(query: String)
        +setCurrentCategory(category: String)
        +toggleFavorite(note: SecureNote)
    }
    
    class SettingsViewModel {
        -SettingsRepository repository
        -AuthManager authManager
        -BackupManager backupManager
        +changeMasterPassword(oldPassword: String, newPassword: String): Boolean
        +enableBiometric(enabled: Boolean)
        +setAutoLockTime(timeInMinutes: Int)
        +exportData(password: String, outputFile: File): Boolean
        +importData(password: String, inputFile: File): Boolean
        +resetApp(): Boolean
    }

    %% Utilities
    class BackupManager {
        -PasswordRepository passwordRepository
        -CreditCardRepository cardRepository
        -SecureNoteRepository noteRepository
        -SecurityManager securityManager
        +exportToFile(file: File, password: String): Boolean
        +importFromFile(file: File, password: String): Boolean
        -validateBackupFile(file: File): Boolean
    }
    
    class PasswordGenerator {
        +generatePassword(length: Int, includeUppercase: Boolean, includeLowercase: Boolean, includeNumbers: Boolean, includeSpecialChars: Boolean): String
        +evaluatePasswordStrength(password: String): PasswordStrength
    }
    
    %% Enums and Helper Classes
    class PasswordStrength {
        <<enumeration>>
        WEAK
        MEDIUM
        STRONG
        VERY_STRONG
    }
    
    class PasswordOptions {
        +Integer length
        +Boolean includeUppercase
        +Boolean includeLowercase
        +Boolean includeNumbers
        +Boolean includeSpecialChars
    }
    
    class Credential {
        <<sealed class>>
    }
    
    class PasswordCredential {
        <<class>>
        +String password
    }
    
    class BiometricCredential {
        <<class>>
    }
    
    %% Relationships
    BaseEntry <|-- PasswordEntry
    BaseEntry <|-- CreditCardEntry
    BaseEntry <|-- SecureNote
    
    AppDatabase ..> PasswordDao
    AppDatabase ..> CreditCardDao
    AppDatabase ..> SecureNoteDao
    
    PasswordRepository --> PasswordDao
    PasswordRepository --> SecurityManager
    
    CreditCardRepository --> CreditCardDao
    CreditCardRepository --> SecurityManager
    
    SecureNoteRepository --> SecureNoteDao
    SecureNoteRepository --> SecurityManager
    
    SecurityManager --> CryptoUtils
    SecurityManager --> AuthManager
    SecurityManager --> PasswordGenerator
    
    AuthManager --> MasterPasswordManager
    
    MainViewModel --> AuthManager
    
    PasswordViewModel --> PasswordRepository
    PasswordViewModel --> SecurityManager
    
    CreditCardViewModel --> CreditCardRepository
    CreditCardViewModel --> SecurityManager
    
    SecureNoteViewModel --> SecureNoteRepository
    SecureNoteViewModel --> SecurityManager
    
    SettingsViewModel --> AuthManager
    SettingsViewModel --> BackupManager
    
    BackupManager --> PasswordRepository
    BackupManager --> CreditCardRepository
    BackupManager --> SecureNoteRepository
    BackupManager --> SecurityManager
    
    Credential <|-- PasswordCredential
    Credential <|-- BiometricCredential